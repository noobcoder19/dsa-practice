1. Find the nth root of a number:-

void nthroot(int x,int n)
{
	double epsilon=0.000001;
	if(x>=0 and x<=1)
	{
		low=x;
		high=1;
	}
	else
	{
		low=1;
		high=x;
	}
	double guess=(low+high)/2;
	while(abs(pow(guess,n)-x)>=epsilon)
	{
		if(pow(guess,n)-x>0)
			high=x;
		else
			low=x;

	guess=(low+high)/2;

	}
	cout<<guess;
}

2. Find the median of a matrix:-

int findmedian(int mat[][MAX],int r,int c)
{
	int min=INT_MAX,max=INT_MIN;
	for(int i=0;i<r;i++)
	{
		if(min<mat[i][0])
			min=mat[i][0];
		if(max>mat[i][c-1])
			max=mat[i][c-1];
	}

	int desired=(r*c+1)/2;
	while(min<max)
	{
		int mid=min+(max-min)/2;
		int place=0;
	
		 for (int i = 0; i < r; ++i) 
            place += upper_bound(mat[i], mat[i]+c, mid) - mat[i]; 
        if (place < desired) 
            min = mid + 1; 
        else
            max = mid; 
    } 
    return min; 
}	

2. Find the element that appears once in an array:-

void findmid(int arr[],int low,int high)
{
	if(low>high)
		return;
	
	if(low==high)
		cout<<arr[low];

	while(low<high)
	{
		int mid=low+(high-low)/2;
		if(mid%2==0)
		{
			if(arr[mid]==arr[mid+1])
				findmid(arr,mid+2,high);

			else
				findmid(arr,low,mid);
		}
		else
		{
			if(arr[mid]==arr[mid-1])
				findmid(arr,mid+1,high);

			else
				findmid(arr,low,mid-1);
		}
}

3. kth element of two sorted arrays:-

int find(int A[], int B[], int m,  
         int n, int k_req)  
{ 
    int k = 0, i = 0, j = 0;  
    while(i < m && j < n) 
    { 
        if(A[i] < B[j])  
        { 
            k++; 
            if(k == k_req) 
                return A[i]; 
            i++; 
        }  
        else
        { 
            k++; 
            if(k == k_req) 
                return B[j]; 
            j++; 
        } 
    } 
  
    while(i < m)  
    { 
        k++; 
        if(k == k_req) 
            return A[i]; 
        i++; 
    } 
  
    while(j < n)  
    { 
        k++; 
        if(k == k_req) 
            return B[j]; 
        j++; 
    } 
}

4. find the median of two sorted arrays:-


double Solution::findMedianSortedArrays(const vector<int> &a, const vector<int> &b) {
   int m=a.size();
int n=b.size();
if(m>n)
return findMedianSortedArrays(b,a);
int l=0,r=m;
while(l<=r){
int partx=l+(r-l)/2;
int party=(m+n+1)/2-partx;
int maxlx=(partx==0)?INT_MIN:a[partx-1];
int minrx=(partx==m)?INT_MAX:a[partx];
int maxly=(party==0)?INT_MIN:b[party-1];
int minry=(party==n)?INT_MAX:b[party];
if(maxlx<=minry&&maxly<=minrx){
if((m+n)%2==0)
return (double)(max(maxlx,maxly)+min(minrx,minry))/2;
else
return (double)(max(maxlx,maxly));
}else if(maxlx>minry)
r=partx-1;
else
l=partx+1;
}
return -1;
    
}
