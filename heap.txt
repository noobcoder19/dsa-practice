1. kth largest element in a stream:-

void kthlargest(int arr[],int n)
{
	priority_queue<int,vector<int>,greater<int>> pq;
	for(int i=0;i<k-1;i++)
	{
		cout<<"-1 ";
		pq.push(arr[i]);
	}
		pq.push(arr[k-1]);
		cout<<pq.top()<<" ";
		for(int i=k;i<n;i++)
		{
			if(arr[i]>pq.top())
			{
				pq.pop();
				pq.push(arr[i]);
			}
			cout<<pq.top()<<" ";
		}
	}
}

2. k most occuring elements in a heap:-
int kmost(int arr[],int n,int k)
{
	unordered_map<int,int> umap;
	priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>> pq;
	for(int i=0;i<n;i++)
		umap[arr[i]]++;

	for(auto it=mp.begin();it!=mp.end();it++)
	{
		pq.push(make_pair(it->second,it->first));
		if(pq.size()>k)
		{
			pq.pop();
		}
	}
	int count=0;
	while(!pq.empty())
	{
		count+=pq.top().first;
		pq.pop();
	}
	return count;
}



3. minimum cost of ropes to connect so that sum of connecting them is minimum:-

int mincost(int arr[],int n,int k)
{
	priority_queue<int,vector<int>,greater<int>> pq;
	for(int i=0;i<n;i++)
		pq.push(arr[i]);


	int res=0;
	while(!pq.empty() && pq.size()!=1)
	{
		int sum=pq.top();
		pq.pop();
		sum+=pq.top();
		pq.push(sum);
		result+=sum;
	}
	return result;
} 

4. sort a nearly sorted array:-

void nearlySorted(int arr[], int num, int K)
  {
      priority_queue<int,vector<int>,greater<int>>p;
      for(int i=0;i<=K;i++)
        p.push(arr[i]);
      for(int i=K+1;i<num;i++)
        {
            cout<<p.top()<<" ";
            p.pop();
            p.push(arr[i]);
        }
        while(!p.empty())
         {
             cout<<p.top()<<" ";
             p.pop();
         }
      
  }
5. merge k sorted arrays:-


typedef pair<int,pair<int,int>> pq;
void mergeksorted(int arr[],int n,int k)
{
	int res[k*k];
	priority_queue<pq,vector<pq>,greater<pq>> p;
	for(int i=0;i<n;i++)
		p.push(make_pair(A[i][0],make_pair(i,0)));

	int j=0;
	while(!pq.empty())
	{
		pq temp=p.top();
		p.pop();

		res[j++]=temp.first;
		int iarr=temp.second.first;
		int iele=temp.second.second;
		while(iele<k-1)
		{
			p.push(make_pair(A[iarr][iele+1]),make_pair(iarr,iele));
		}
	}
	return res;
}
6. Frequency of characters:-

void frequency(string str)
{
	int n=str.length();

	int char_count[MAX_CHAR]={0};
	for(int i=0;i<n;i+)

		