1. 0/1 Knapsack:-
(Recursive)
int findmax(int val[],int wt[],int n,int W)
{
	if(n==0 || W==0)
		return 0;

	if(wt[n-1]<=W)
		return max(val[n-1]+findmax(val,wt,n-1,W-wt[n-1]),findmax(val,wt,n-1,W));
	else
		return findmax(val,wt,n-1,W);

}

(Top-down)
A=val;
B=wt;
int Solution::solve(vector<int> &A, vector<int> &B, int C) {
    
    int n=A.size();
    int m=B.size();
    
    int dp[n+1][C+1];
    for(int i=0;i<=n;i++)
        for(int j=0;j<=C;j++)
            dp[i][j]=0;
            
    for(int i=1;i<=n;i++){
        for(int j=1;j<=C;j++){
            if(B[i-1]<=j)
                dp[i][j]=max(A[i-1]+dp[i-1][j-B[i-1]],dp[i-1][j]);
             else
                dp[i][j]=dp[i-1][j];
        }
    }
    return dp[n][C];
}

2. Subset sum problem:-

(Recursion):-
bool subsetsum(int arr[],int sum,int n)
{
	if(sum==0 || n==0)
		return false;
	
	if(subsetsum(arr,sum-arr[n-1],n-1) || subsetsum(arr,sum,n-1))
		return true;

	return false;
}

(DP)

int Solution::solve(vector<int> &A, vector<int> &B, int C) {
    
    int n=A.size();
    int m=B.size();
    
    int dp[n+1][C+1];
    for(int i=0;i<=n;i++)
        for(int j=0;j<=C;j++)
            dp[i][j]=0;
            
    for(int i=1;i<=n;i++){
        for(int j=1;j<=C;j++){
            if(B[i-1]<=j)
                dp[i][j]=max(A[i-1]+dp[i-1][j-B[i-1]],dp[i-1][j]);
             else
                dp[i][j]=dp[i-1][j];
        }
    }
    return dp[n][C];
}

3. Unbounded knapsack:-

 if(B[i-1]<=j)
                dp[i][j]=max(A[i-1]+dp[i][j-B[i-1]],dp[i-1][j]);
             else
                dp[i][j]=dp[i-1][j];

4:- LIS:-

int findlis(int arr[],int n)
{
	int tail[n];
	tail[0]=arr[0];
	int len=1;
	for(int i=0;i<n;i++)
	{
		if(arr[i]>tail[len-1])
		{
			tail[len]=arr[i];
			len++;
		}
		else
		{
			int c=ciel(tail,0,len-1,arr[i])
			tail[c]=arr[i];
		}
	}
	return len;
}

int ciel(int tail[],int l,int r,int x)
{
	while(l<r)
	{
		int m=l+(r-l)/2;

		if(tail[m]>=x)
			r=m;
		else
			l=m+1;
	}
	return r;
}

maximum path in aa matrix:-

int maxpath(int i,int j)
{
	if(i==n-1 && j==m-1)
		return a[i][j];

	if(visited[i][j])
		return dp[i][j];

	visited[i][j]=1;

	int &total_sum=dp[i][j];

	if(i<n-1 && j<m-1)
	{
		int current_sum=max(maxpath(i+1,j),max(maxpath(i,j+1),maxpath(i+1,j+1));
		total_sum=a[i][j]+current_sum;
	}
	else if (i == n - 1) 
        total_sum = a[i][j] 
                    + maximum_sum_path(i, j + 1); 
  
  
    else
        total_sum = a[i][j] 
                    + maximum_sum_path(i + 1, j); 
  

    return total_sum; 
}

6. Maximum product Subarray:-

int maxProduct(int A[], int n) {
    int r = A[0];

    // imax/imin stores the max/min product of
    // subarray that ends with the current number A[i]
    for (int i = 1, imax = r, imin = r; i < n; i++) {
        // multiplied by a negative makes big number smaller, small number bigger
        // so we redefine the extremums by swapping them
        if (A[i] < 0)
            swap(imax, imin);

        // max/min product for the current number is either the current number itself
        // or the max/min by the previous number times the current one
        imax = max(A[i], imax * A[i]);
        imin = min(A[i], imin * A[i]);

        // the newly computed max value is a candidate for our global result
        r = max(r, imax);
    }
    return r;
}

7. count the no of ways to decode a string:-

int noofways(char *digts,int n)
{
	int dp[n+1];

	dp[0]=1;
	dp[1]=1;

	if(digits[0]=='0')
		return 0;


	for(int i=2;i<=n;i++){
	dp[i]=0;
	if(digits[i-1]>'0')
		dp[i]=dp[i-1];

	if (digits[i-2] == '1' ||  
              (digits[i-2] == '2' && digits[i-1] < '7') ) 
            dp[i] += dp[i-2]; 
		}
	return dp[n];
}
	

8. MCM:-
pass i=1,j=size-1;
int solve(int arr[],int i,int j)
{
	if(i>=j)
	return 0;

	int minm=int_max;
	for(int k=i;k<=j-1;k++)
	{
		int temp=solve(arr,i,k)+solve(arr,k+1,j)
				+arr[i-1]*arr[k]*arr[j];
		minm=min(minm,temp);
	}
	return minm;
}	

maximum sum path in a matrix:-

int maxpath(int i,int j)
{
	if(i==n-1 && j==m-1)
		return a[i][j];

	if(visited[i][j])
		return dp[i][j];


	visited[i][j]=1;

	int &total_sum=dp[i][j];

	if(i<n-1 && j<m-1)
	{
		int current_sum=max(maxpath(i+1,j+1),maxpath(i+1,j),maxpath(i,j+1));
		int total_sum=current_sum+a[i][j];
	}
	if(i==n-1)
	{
		total_sum=a[i][j]+maxpath(i,j+1);
	}
	else
	{
		total_sum=a[i][j]+maxpath(i+1,j);
	}
	return total_sum;
}
8. Egg dropping problem:-

int findthenumberofways(int f,int e)
{
	if(f==0 || f==1)
		return f;

	if(e==1)
		return f;

	for(int k=1;k<=f;k++)
	{
		int temp=1+max(solve(k-1,e-1),solve(f-k,e));
		int minm=min(minm,temp);
	}
	return minm;
}

9. palindome partitioning;_
pass i=0,j=size-1;
int solve(int arr[],int i,int j)
{
	if(i>=j)
	return 0;

	int minm=int_max;
	for(int k=i;k<=j-1;k++)
	{
		int temp=solve(arr,i,k)+solve(arr,k+1,j)
				+1;
		minm=min(minm,temp);
	}
	return minm;
}





	

