1. Convert a bst to doubly linked list

Node *prev=NULL;
Node *converttodll(Node *root)
{
	if(root==NULL)
		return root;

	Node *head=converttodll(root->left);
	if(prev==NULL)
		head=root;

	else
		{
			root->left=prev;
			prev->right=root;
		}
	prev=root;
	converttodll(root->right);
	return root;
}
2. median in a stream of data:-
void findmedian(vector<int> &v)
{
    int n=v.size();
    priority_queue<int> s;
    priority_queue<int,vector<int>,greater<int>> g;
    s.push(v[0]);
    cout<<v[0]<<"\n";
    for(int i=1;i<n;i++)
    {
        int x=v[i];
        if(s.size()>g.size()){
            if(s.top()>x)
            {
                g.push(s.top());
                s.pop();
                s.push(x);
            }
            else
                g.push(x);
                
        cout<<int(floor(s.top()+g.top())/2)<<"\n";
        }
        else
            {
                if(x<=s.top())
                    s.push(x);
                    
                else
                    {
                        g.push(x);
                        s.push(g.top());
                        g.pop();
                    }
                    
                cout<<int(floor(s.top()))<<"\n";
            }
    
}
}
3. kth largest in a stream of integers:-

void kthlargest(int arr[],int n)
{
	priority_queue<int,vector<int>,greater<int>> pq;
	for(int i=0;i<k-1;i++)
	{
		cout<<"-1 ";
		pq.push(arr[i]);
	}
		pq.push(arr[k-1]);
		cout<<pq.top()<<" ";
		for(int i=k;i<n;i++)
		{
			if(arr[i]>pq.top())
			{
				pq.pop();
				pq.push(arr[i]);
			}
			cout<<pq.top()<<" ";
		}
	}
}

4. distinct numbers in a window:-

int distict(int arr[],int n,int k)
{
	vector<int> res;
	map<int,int> umap;
	for(int i=0;i<k;i++)
	{
		umap[arr[i]]++;
	}	
	res.push_back(umap.size());
	for(int i=k;i<n;i++)
	{
		umap[arr[i-k]]--;
		if(umap[arr[i-k]]==0)
			umap.erase(arr[i-k]);
		
		umap[arr[i]]++;

		res.push_back(umap.size());
	}
	return res;
}
void _floodfill(int arr[][],int x,int y,int prevc,int newc)
{

	if(x<0 || x>M || y<0 || y>N)
		return;	

	if(arr[x][y]!=prevc)
		return;

	if(arr[x][y]==newc)
		return;

	arr[x][y]=newc;
	floodFillUtil(screen, x+1, y, prevC, newC); 
    floodFillUtil(screen, x-1, y, prevC, newC); 
    floodFillUtil(screen, x, y+1, prevC, newC); 
    floodFillUtil(screen, x, y-1, prevC, newC); 
} 


void floodfill(int arr[][],int x,int y,int newc)
{
	int prevc=arr[x][y];
	_floodfill(arr,x,y,prevc,newc);
}
		



