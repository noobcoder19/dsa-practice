1. Rotten oranges:-

void rotten(int V[R][C],int R,int C)
{
	bool changed=false;
	int no=2;
	while(true)
	{
	for(int i=0;i<R;i++)
	{
		for(int i=0;i<C;i++)
		{
			if(v[i][j]==no)
			{	
			if(isSafe(i+1,j) && v[i+1][j]==1)
			{
				v[i+1][j]=v[i][j]+1;
				changed=true;
			}
			if(isSafe(i,j+1) && v[i][j+1]==1)
			{
				v[i][j+1]=v[i][j]+1;
				changed=true;
			}
			if(isSafe(i-1,j) && v[i-1][j]==1)
			{
				v[i-1][j]=v[i][j]+1;
				changed=true;
			}
			if(isSafe(i,j-1) && v[i][j-1]==1)
			{
				v[i][j-1]=v[i][j]+1;
				changed=true;
			}
		}
	}
	}
	if(!changed)
		break;
	changed=false;
	no++;
	}
	for(int i=0;i<R;i++)
		for(int j=0;j<C;j++)
			if(v[i][j]==1)
				return -1;
	return no-2;
}



2. bool issafe(int row,int col,int i,int j)
{
	if(i>=0 && i<row && j>=0 && j<col)
		return true;
	return false;
}
main()
{
int total =0;
int cnt=0,tm=0;
queue<pair<int,int>> q;
for(int i=0;i<r;i++){
	for(int j=0;j<c;j++){
		if(arr[i][j]==1 && arr[i][j]==2)
			total++;

		if(arr[i][j]==2)
			q.push(make_pair(i,j));

	while(!q.empty())
	{
		cnt+=q.size();
		int s=q.size();
		while(s--)
		{
			pair<int,int> x=q.front();
			q.pop();
			int row=x.first;
			int col=x.second;
			if(issafe(r,c,row+1,col) && arr[row+1][col]==1){
				arr[row+1][col]=2;
				q.push(make_pair(row+1,col));
			}
			
			if(issafe(r,c,row,col+1) && arr[row][col+1]==1){
				arr[row][col+1]=2;
				q.push(make_pair(row+1,col));}

			if(issafe(r,c,row-1,col) && arr[row-1][col]==1){
				arr[row-1][col]=2;
				q.push(make_pair(row-1,col));}
			
			if(issafe(r,c,row,col-1) && arr[row][col-1]==1){
				arr[row][col-1]=2;
				q.push(make_pair(row,col-1));}

		}
		++tm;
	}
	if(cnt==total)
		return tm-1;
	else
		return -1;
}

2. Reverse words in a given string:-

void reverseWords(string &s)
{
	int start=0;
	for(int end=0;end<s.length();i++)
	{
	if(s[end]==' ')
	{
	reverse(s.begin()+start,s.begin()+end);
	start=end+1;
	}
	}
	reverse(s.begin()+start,s.end());
}
void reversew(char *start,char *end)
{
	char temp;
	while(start<end)
	{
		temp=*start;
		*start++=*end--;
		*end=temp;
	}
}
void reverse(string s)
{
	char *word_begin=s;
	char *temp=s;
	while(*temp)
	{
		temp++;
		if(*temp=='\0')
		{
			reversew(word_begin,temp-1);
		}
		if(*temp=='.')
		{
			reversew(word_begin,temp-1);
			temp=word_begin+1;
		}
	}
	reversew(s,temp-1);
	for(int i=0;i!='\0';i++)
		cout<<s[i]<;
}		

2. Longest Palindromic Substring:-

int palindromic(string s)
{
	int n=s.length();
	bool table[n][n];
	memset(table,0,sizeof(table));
	if(n==0)
		return 0;

	int maxlength;
	for(int i=0;i<n;i++)
		table[i][i]=1;

	int start=0;
	for(int i=0;i<n-1;i++){
	if(s[i]==s[i+1])
	table[i][i+1]=1;
	start=i;
	maxlength=2;
	}
	for(int k=3;k<n;k++)
	{
	for(int i=0;i<n-k+1;i++)
	{
		int j=i+k-1;
		if(s[i]==s[j] && table[i+1][j-1])
		{
			table[i][j]=true;
			if(k>maxlength){
				start=i;
				maxlength=k;
			}
	}
	}
	return maxlength; 
}
	
	
3. Implement stsr:-

int strstr(string a,string b)
{
	int m=a.length();
	int n=b.length();

	for(int i=0;i<=m-n;i++)
	{
		int j;
		for(j=0;j<n;j++)
		{
			if(str[i+j]!=str[j])
				break;
		}
			if(j==n)
				return i;
	}
return -1;
}
4. Implement atoi:-

int toatoi(string str)
{
	int res=0;
	for(int i=0;str[i];i++)
	{
		res*=10+(s[i]-'0');
	}
	return res;
}

	
3. Rabin Karp's Algorithm:-

void patternsearch(char patt[],char text[],int q)
{

	int p=0,t=0;
	int m=pat.length();
	int n=text.length();
	int h=1;

	for(int i=0;i<m-1;i++)
		h=(h*d)%q;
	
	for(int i=0;i<m;i++)
	{
		p=(d*p+pat[i])%q;
		t=(d*t+text[i])%q'
	}

	for(int i=0;i<=n-m;i++)
	{
		if(p==t){
		for(j=0;j<m;j++){
			if(text[i+j]!=pat[j];
			break;}}
		else
			cout<<i;
	}
	if(i<n-m)
		t=(d*(t-text[i]*h)+text[i+m])%q;
	
	if(t<0)
		t=t+q;
	}
}
}

2.construction of lps array:-

void lps(str,lps[])
{
lps[0]=0;
int i=1;
int n=str.length();
len=0;
while(i<n)
{
	if(str[i]==str[len])
	{
		len++;
		lps[i]=len;
i++;
	}
	else
	{
		if(len==0){
			lps[i]=0;
		i++;
}
	}
		else
			len=lps[len-1];
}
3. KMP matching algorithm:-

void KMP(int pat[],int text[])
{
	 int m=text.length();
	 int n=pat.length();
	int i=0,j=0;
	int lps[m];
	lps(pat,lps);
	while(i<n)
	{
		if(text[i]==pat[j])
		{
			i++;
			j++;
		}
		if(j==m)
		{
			print(i-j);
			j=lps[j-1];
		}
		else if(i<n && pat[j]!=text[i])
		{
			if(j==0) {i++;};
			else
			    j=lps[j-1];
		}
	}
}

4. Look and say:-
void lookandsay(string str)
{
	//string temp="";
	//int i=0;
	//str+='$';
	int n=str.length();
	if(n==1)
		return "1";
	if(n==2)
		return "11";
		
	string str="11";
	for(int i=3;i<=n;i++)
	{
		str+="$";
		int len=str.length();
		int cnt=1;
		string temp="";
		for(int j=1;j<len;j++)
		{
			if(str[j]!=str[j-1])
			{
				temp+=cnt+'0';
				temp+=str[j-1];
				cnt=1;
			}
			else
				cnt++;
		}
		str=temp;
	}
	return str;
}	