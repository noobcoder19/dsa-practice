1. Find if a tripet sum exists in an array:-


void findsum(int arr[],int n,int sum)
{
	sort(arr,arr+n);
	for(int i=0;i<n-2;i++)
	{
		int l=i+1,r=n-1;
		while(l<r){
		if(arr[i]+arr[l]+arr[r]==sum)
		
	
		else if(arr[i]+arr[l]+arr[r]<sum)
		l++;

		else
		r--;
	}
return false;
}

void findsum(int arr[],int n,int sum)
{
	unordered_set<int> uset;

	for(int i=0;i<n-2;i++)
	{
		int curr_sum=sum-arr[i];
		for(int j=i+1;j<n;j++)
		{
			if(uset.find(curr_sum-arr[j])!=uset.end())
			{
				return true;
			}
			uset.insert(A[j+1]);
		}
	}
	return false;
}

2. Maximum continous ones in an array:-

int findMaxConsecutiveOnes(vector<int>& nums) {
        int count=0;
        int n=nums.size();
        int res=INT_MIN;
        for(int n : nums){
        if(n==1) {
            count++;
            res=max(count,res);
            
        }
        else
            count=0;
    }
        return res;
    }