1. GAS Station:-

int cancomplete(vector<int> &A,vector<int> &b)
{
	if(accumulate(A.begin(),A.end(),0)<accumulate(B.begin(),B.end(),0);
		return -1;

	int n=A.size();
	if(n==1)
		return 0;
	
	int gas=0;
	int start_index=0;
	for(int i=0;i<n-1;i++)
	{
		gas+=A[i]-B[i];
		if(gas<0){
			gas=0;
			start_index=(i+1)%n;
			}
	}
	return start_index;
}

2. Majority element:-

int majority(vector<int> &A)
{
	int majority=A[0];
	int count=1;
	int n=A.size();
	for(int i=1;i<n;i++)
	{
		if(A[i]==majority)
			count++;

		else
		{
			count--;
			if(count==0)
			{
				majority=A[i];
				count=1;
			}
		}
	}
	return majority;
}

3. Distribute Candies:-

int candy(vector<int> &A)
{
	int n=A.size();
	vector<int> v(n,1),vec(n,1);

	for(int i=1;i<n;i++)
	{
		if(A[i]>A[i-1])
			v[i]=v[i-1]+1;

	}
	for(int i=n-2;i>0;i--)
	{
		if(A[i]>A[i+1])
			vec[i]=vec[i+1]+1;
	}
	
	int sum=0;
	for(int i=0;i<n;i++)
	{
		sum+=max(v[i],vec[i]);
	}
	return sum;
}	


4. Assign mice to holes:-

int mice(vector<int> &a,vector<int> &b)
{
	sort(a.begin(),a.end());
	sort(b.begin(),b.end());
	int ans=INT_MIN;
	int n=a.size();
	for(int i=0;i<n;i++)
	{
		ans=max(ans,abs(a[i]-b[i]));
	}
	return ans;
}

5. Meeting rooms:-

bool compare(vector<int> a,vector<int> b)
{
    return a[0]<b[0];
}

int Solution::solve(vector<vector<int> > &A) {
    int n=A.size();
    sort(A.begin(),A.end(),compare);
    priority_queue<int,vector<int>,greater<int>> pq;
    pq.push(A[0][1]);
    for(int i=1;i<n;i++)
    {
        int top=pq.top();
        if(A[i][0]>=top)
        {
            pq.pop();
        }
        pq.push(A[i][1]);
    }
    return pq.size();
    
}

1. Activity Selection Problem:-
void compare(pair<int,int> a,pair<int,int> b)
{
	return (a.second<b.second);
}
int maxactivities(pair<int,int> arr[],int n)
{
	sort(arr,arr+n,compare);
	int prev=0;
	int res=1;
	for(int curr=1;curr<n;i++)
	{
		if(arr[curr].first>=arr[prev].second)
		{
			res++;
			prev=curr;
		}
	}
	return res;
}

2. Fractional Knapsack:-

bool compare(pair<int,int> a,pair<int,int> b)
{
	double r1=a.first/a.second;

	double r2=b.first/b.second;

	return r1>r2;
}
double fnapsack(pair<int,int> arr[],int n,int W)
{
	sort(arr,arr+n,compare);
	int res=0;
	for(int i=0;i<n;i++)
	{
		if(arr[i].second<=W)
		{
			res+=arr[i].first;
			W-=arr[i].second;
		}
		else
		{
			res+=arr[i].irst*W/arr[i].second;
			break;
		}
	}
	return res;
}

Minnimum no of platforms required:-

int platform(int arr[], int dep[], int n) 
{ 
   
   sort(arr, arr+n); 
   sort(dep, dep+n); 
  
   int plat_needed = 1, result = 1; 
   int i = 1, j = 0; 
  
   while (i < n && j < n) 
   { 

      if (arr[i] <= dep[j]) 
      { 
          plat_needed++; 
          i++; 
  
 
          if (plat_needed > result)  
              result = plat_needed; 
      } 
  
      
      else
      { 
          plat_needed--; 
          j++; 
      } 
   } 
  
   return result; 
}

		